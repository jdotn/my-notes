neovim command:
:Ex
:lua 
:luado
:h
:h stdlib
:checkhealth
2025-01-24
・大前提として、最初からNeovimで環境を構築するのは難しく
理解も含めて非常に時間がかかる。
・少しずつ構築していくこと。
・Neovimを本格的なIDEとして使用して本当に快適に感じるようになるまで
には数か月かかる可能性を念頭に置いておくこと。
・最初はLazyVim, AstoNvim, LunarVimなどから利用し、
いろいろ試し、物事がどのように行われるか、どのプラグインが重要か
を理解してから独自の設定をしていく。

Neovimのメリット：
プラグインとキーバインドを完全に制御できる。
容量、動作ともに軽い。

Neovimではデフォルトでファイルツリーを開くことが可能。
:Explore
ターミナルを開くなら
:terminal

Neovimの3つのAPI
1.Vim API
2.Nvim API
3.Lua API

Vim API
Vim由来のAPI。Luaからはvim.cmd()やvim.fn()を用いてアクセス可能。
使用できる関数は:h builtin-functionsから確認できる。

Nvim API
Neovim由来のAPI。Luaからはvim.apiで始まる関数を用いてアクセス可能。

Lua API
Lua由来のAPI。Luaの標準ライブラリを用いてアクセス可能。
詳細はlua-stdlibのドキュメントを見るとよい。

バッファとは?
メモリに展開したファイルの内容のこと。
バッファには以下の3つの状態がある。
1.active-buffer: アクティブ(表示された状態)
2.hidden-buffer: 隠れ(非表示だがメモリに読み込まれている)
3.inactive-buffer: 非アクティブ(非表示かつ読み込まれていない)

メモリ展開≠表示状態である点は注意。

今のプロセスで存在しているバッファを見るには?
:ls
vimプロセスでどのようなバッファが読み込まれているか確認できる。

バッファを切り替えるには?
:bprev  一つ前のバッファ
:bnext  一つ後のバッファ
:bfirst 先頭のバッファ
:blast  末尾のバッファ
↑実際にこれを入力するのは面倒なのでキーバインドを割り当てるのが普通

バッファにファイルを追加するには?
:e [パス]
この辺はNerdtreeのようなファイルツリープラグインを入れたほうが楽

現在開いているバッファを閉じるには?
:bd N (Nはバッファ番号, 現在開いているバッファであれば必要なし)

ウィンドウとは?
バッファを表示する領域(枠)。
一つのウィンドウを分割して複数のウィンドウを表示したり、
一つのバッファを複数のウィンドウに表示したりすることが可能。

ウィンドウを分割する方法は?
:split(水平方向) or Ctrl-w s
あるいは
:vsplit(垂直方向) or Ctrl-w v

ウィンドウを閉じるには?
:close
Ctrl-w c or q or w

ウィンドウを移動するには?
Ctrl-w h
Ctrl-w l
Ctrl-w j
Ctrl-w k

タブとは?
ウィンドウの集合。ウィンドウを配置した領域ともいえる。
バッファを表示するものを束ねるもの。

レジスタとは?
vimの中でのみ使える名前付きクリップボードのようなもの。
以下の4つが基本的なレジスタ。
1.無名レジスタ
2.番号付きレジスタ
3.名前付きレジスタ
4.クリップボード

レジスタにヤンク(コピー)する方法(ノーマルモード)
yy    無名レジスタ(ヤンクが起きる度にヤンクされる)
"1yy  番号付きレジスタ
"ayy  名前付きレジスタ
""yy  無名レジスタ
"+yy  クリップボード

レジスタの内容をペースト
p     無名レジスタ(最後にヤンクされた内容)
"1p   番号付きレジスタ
"ap   名前付きレジスタ
"+p   クリップボード

xやXで1文字削除したときに無名レジスタを上書きさせない設定は
しておこう!
*xで消した内容をブラックホールレジスタに格納することになる。

vimで特に重要なのはLSPとtelescopeのみ。
telescopeはファイルツリーよりも高速。

